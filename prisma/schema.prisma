// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                       Int     @id @default(autoincrement())
  userId                   Int     @map("user_id")
  type                     String
  provider                 String
  providerAccountId        String  @map("provider_account_id")
  refresh_token            String?
  refresh_token_expires_in Int?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  oauth_token_secret       String?
  oauth_token              String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique @map("session_token")
  userId       Int      @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

/// A single user.
model User {
  id              Int              @id @default(autoincrement())
  name            String?
  email           String?          @unique
  emailVerified   DateTime?        @map("email_verified")
  image           String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  selfAssessments SelfAssessment[]
  Account         Account[]
  Session         Session[]

  @@map(name: "users")
}

// Limiting the score to an enum to ensure only integers from 0 to 10 can be used.
enum Score {
  ZERO
  ONE
  TWO
  THREE
  FOUR
  FIVE
  SIX
  SEVEN
  EIGHT
  NINE
  TEN
}

/// An area of skill a person can rate themselves on.
model SkillArea {
  id              Int              @id @default(autoincrement())
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  title           String           @db.VarChar(255)
  description     String           @db.VarChar(255)
  selfAssessments SelfAssessment[]
}

/// How someone has rated themselves on a scale of 0-10.
model SelfAssessment {
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  score       Score
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  skillArea   SkillArea @relation(fields: [skillAreaId], references: [id], onDelete: Cascade)
  skillAreaId Int

  @@id([userId, skillAreaId])
  @@unique([userId, skillAreaId])
}
